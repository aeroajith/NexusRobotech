[{"D:\\ecommerce\\frontend\\src\\index.js":"1","D:\\ecommerce\\frontend\\src\\store.js":"2","D:\\ecommerce\\frontend\\src\\reportWebVitals.js":"3","D:\\ecommerce\\frontend\\src\\App.js":"4","D:\\ecommerce\\frontend\\src\\components\\Footer.js":"5","D:\\ecommerce\\frontend\\src\\components\\reducers\\productReducers.js":"6","D:\\ecommerce\\frontend\\src\\components\\reducers\\userReducers.js":"7","D:\\ecommerce\\frontend\\src\\components\\reducers\\orderReducers.js":"8","D:\\ecommerce\\frontend\\src\\pages\\RoughPage.js":"9","D:\\ecommerce\\frontend\\src\\components\\Header.js":"10","D:\\ecommerce\\frontend\\src\\components\\reducers\\cartReducers.js":"11","D:\\ecommerce\\frontend\\src\\pages\\HomePage.js":"12","D:\\ecommerce\\frontend\\src\\pages\\ProductPage.js":"13","D:\\ecommerce\\frontend\\src\\pages\\CartScreen.js":"14","D:\\ecommerce\\frontend\\src\\pages\\LoginPage.js":"15","D:\\ecommerce\\frontend\\src\\pages\\RegisterPage.js":"16","D:\\ecommerce\\frontend\\src\\pages\\ProfilePage.js":"17","D:\\ecommerce\\frontend\\src\\pages\\PlaceOrderPage.js":"18","D:\\ecommerce\\frontend\\src\\pages\\PaymentPage.js":"19","D:\\ecommerce\\frontend\\src\\pages\\UsersListPage.js":"20","D:\\ecommerce\\frontend\\src\\pages\\OrdersPage.js":"21","D:\\ecommerce\\frontend\\src\\pages\\ShippingPage.js":"22","D:\\ecommerce\\frontend\\src\\pages\\UserEditPage.js":"23","D:\\ecommerce\\frontend\\src\\pages\\ProductListPage.js":"24","D:\\ecommerce\\frontend\\src\\pages\\ProductEditPage.js":"25","D:\\ecommerce\\frontend\\src\\pages\\OrderListPage.js":"26","D:\\ecommerce\\frontend\\src\\components\\Loader.js":"27","D:\\ecommerce\\frontend\\src\\components\\SearchBox.js":"28","D:\\ecommerce\\frontend\\src\\components\\Message.js":"29","D:\\ecommerce\\frontend\\src\\components\\Paginate.js":"30","D:\\ecommerce\\frontend\\src\\components\\ProductCarousal.js":"31","D:\\ecommerce\\frontend\\src\\components\\Rating.js":"32","D:\\ecommerce\\frontend\\src\\pages\\FormContainer.js":"33","D:\\ecommerce\\frontend\\src\\components\\CheckoutSteps.js":"34","D:\\ecommerce\\frontend\\src\\components\\constants\\userConstants.js":"35","D:\\ecommerce\\frontend\\src\\components\\constants\\productConstants.js":"36","D:\\ecommerce\\frontend\\src\\components\\constants\\orderConstants.js":"37","D:\\ecommerce\\frontend\\src\\components\\actions\\productAction.js":"38","D:\\ecommerce\\frontend\\src\\components\\Product.js":"39","D:\\ecommerce\\frontend\\src\\components\\constants\\cartConstants.js":"40","D:\\ecommerce\\frontend\\src\\components\\actions\\userAction.js":"41","D:\\ecommerce\\frontend\\src\\components\\actions\\cartActions.js":"42","D:\\ecommerce\\frontend\\src\\components\\actions\\orderActions.js":"43"},{"size":630,"mtime":1686662446353,"results":"44","hashOfConfig":"45"},{"size":2416,"mtime":1687968940574,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1686129486782,"results":"47","hashOfConfig":"45"},{"size":2500,"mtime":1687622148697,"results":"48","hashOfConfig":"45"},{"size":335,"mtime":1686130874316,"results":"49","hashOfConfig":"45"},{"size":4238,"mtime":1687498071409,"results":"50","hashOfConfig":"45"},{"size":3969,"mtime":1687358226693,"results":"51","hashOfConfig":"45"},{"size":4229,"mtime":1687422129449,"results":"52","hashOfConfig":"45"},{"size":472,"mtime":1687269584737,"results":"53","hashOfConfig":"45"},{"size":3150,"mtime":1687632204515,"results":"54","hashOfConfig":"45"},{"size":1597,"mtime":1687627867920,"results":"55","hashOfConfig":"45"},{"size":1587,"mtime":1687623132001,"results":"56","hashOfConfig":"45"},{"size":6571,"mtime":1687626392049,"results":"57","hashOfConfig":"45"},{"size":5450,"mtime":1687632119851,"results":"58","hashOfConfig":"45"},{"size":3246,"mtime":1687622739138,"results":"59","hashOfConfig":"45"},{"size":4537,"mtime":1687622873786,"results":"60","hashOfConfig":"45"},{"size":6950,"mtime":1687622933130,"results":"61","hashOfConfig":"45"},{"size":5975,"mtime":1687959110029,"results":"62","hashOfConfig":"45"},{"size":4064,"mtime":1687662393522,"results":"63","hashOfConfig":"45"},{"size":3629,"mtime":1687970194978,"results":"64","hashOfConfig":"45"},{"size":11078,"mtime":1687968335134,"results":"65","hashOfConfig":"45"},{"size":3639,"mtime":1687919706532,"results":"66","hashOfConfig":"45"},{"size":4103,"mtime":1687623085206,"results":"67","hashOfConfig":"45"},{"size":4881,"mtime":1687622676649,"results":"68","hashOfConfig":"45"},{"size":8228,"mtime":1687622660735,"results":"69","hashOfConfig":"45"},{"size":2980,"mtime":1687622711738,"results":"70","hashOfConfig":"45"},{"size":364,"mtime":1686673939359,"results":"71","hashOfConfig":"45"},{"size":1025,"mtime":1687496385409,"results":"72","hashOfConfig":"45"},{"size":222,"mtime":1686674401811,"results":"73","hashOfConfig":"45"},{"size":895,"mtime":1687496927428,"results":"74","hashOfConfig":"45"},{"size":1241,"mtime":1687502275837,"results":"75","hashOfConfig":"45"},{"size":1937,"mtime":1686132021740,"results":"76","hashOfConfig":"45"},{"size":342,"mtime":1686903432902,"results":"77","hashOfConfig":"45"},{"size":1228,"mtime":1686910715228,"results":"78","hashOfConfig":"45"},{"size":1538,"mtime":1687357997732,"results":"79","hashOfConfig":"45"},{"size":1556,"mtime":1687497914813,"results":"80","hashOfConfig":"45"},{"size":1268,"mtime":1687422048247,"results":"81","hashOfConfig":"45"},{"size":6076,"mtime":1687623217095,"results":"82","hashOfConfig":"45"},{"size":1067,"mtime":1687621898108,"results":"83","hashOfConfig":"45"},{"size":300,"mtime":1687627806788,"results":"84","hashOfConfig":"45"},{"size":7546,"mtime":1687969581436,"results":"85","hashOfConfig":"45"},{"size":1326,"mtime":1687627797664,"results":"86","hashOfConfig":"45"},{"size":6026,"mtime":1687623158573,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13q6rtl",{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ecommerce\\frontend\\src\\index.js",[],[],"D:\\ecommerce\\frontend\\src\\store.js",[],[],[],"D:\\ecommerce\\frontend\\src\\reportWebVitals.js",[],[],"D:\\ecommerce\\frontend\\src\\App.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\Footer.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\reducers\\productReducers.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\reducers\\userReducers.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\reducers\\orderReducers.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\RoughPage.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\Header.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\reducers\\cartReducers.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\HomePage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\ProductPage.js",["225"],[],"import React,{ useEffect, useState} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, ListGroupItem, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport { listProductDetails,createProductReview } from '../components/actions/productAction'\r\nimport { useParams, useNavigate } from \"react-router-dom\"\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../components/constants/productConstants'\r\n\r\n\r\n\r\nexport default function ProductPage() {\r\n\r\n  const [qty, setQty] = useState(1)\r\n  const [rating, setRating] = useState(0)\r\n  const [comment, setComment] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n\r\n  const userLogin = useSelector(state =>state.userLogin)\r\n  const {userInfo} = userLogin\r\n\r\n  const productReview = useSelector(state =>state.productReview)\r\n  const {loading:loadingProductReview,error:errorProductReview, success:successProductReview} = productReview\r\n\r\n  \r\n  const productDetails = useSelector(state =>state.productDetails)\r\n  const {loading,error,product} = productDetails\r\n \r\n  useEffect(()=>{\r\n    window.scrollTo(0, 0)\r\n    if(successProductReview){\r\n      setRating(0)\r\n      setComment('')\r\n      dispatch({type:PRODUCT_CREATE_REVIEW_RESET})\r\n    }\r\n\r\n    dispatch(listProductDetails(id))\r\n  \r\n     },[dispatch,successProductReview])\r\n\r\n  const addToCartHandler = () =>{\r\n    navigate(`/cart/${product._id}?qty=${qty}`)\r\n  }\r\n\r\n  const submitHandler =(e) =>{\r\n    e.preventDefault()\r\n    dispatch(createProductReview(id,{rating,comment}))\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <Link to='/' className='btn btn-light my-3'>Go  Back</Link>\r\n    {loading ? <Loader/>\r\n    : error \r\n    ? <Message variant='danger'>{error}</Message>\r\n    :(\r\n      <div>\r\n    <Row>\r\n      <Col md={4}>\r\n        <Image src={product.image} alt={product.name} fluid/>\r\n      </Col>\r\n\r\n      <Col md={5}>\r\n        <ListGroup variant='flush' className='d-flex justify-content-center'>\r\n\r\n          <ListGroupItem>\r\n            <h3>{product.name}</h3>\r\n          </ListGroupItem>\r\n\r\n          <ListGroupItem>\r\n            <Rating value = {product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\r\n          </ListGroupItem>\r\n\r\n          <ListGroupItem >\r\n            Price: Rs.{product.price}\r\n          </ListGroupItem>\r\n\r\n          <ListGroupItem className=\"d-flex align-items-center justify-content-center\" >\r\n            Description: {product.description}\r\n          </ListGroupItem>\r\n\r\n        </ListGroup>\r\n      </Col>\r\n\r\n      <Col md={3}>\r\n        <Card>\r\n          <ListGroup variant='flush'>\r\n            <ListGroupItem>\r\n              <Row>\r\n                <Col>Price :</Col>\r\n                <Col>\r\n                <strong>Rs.{product.price}</strong>\r\n                </Col>\r\n              </Row>\r\n            </ListGroupItem>\r\n\r\n            <ListGroupItem>\r\n              <Row>\r\n                <Col>Status :</Col>\r\n                <Col>\r\n                {product.countInStock>0 ? \"In Stock\" : \"Out of Stock\"}\r\n                </Col>\r\n              </Row>\r\n            </ListGroupItem>\r\n            {product.countInStock > 0 && (\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col >Qty :</Col>\r\n                  <Col xs='auto' className='my-1'>\r\n                  <Form.Control as='select' value={qty} onChange={(e) =>setQty(e.target.value)} >\r\n                    {\r\n\r\n                      [...Array(product.countInStock).keys()].map((x)=>(\r\n                        <option key={x+1} value={x+1}>{x+1}</option>\r\n                      ))\r\n                    }\r\n                    </Form.Control>\r\n                    </Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n            )}\r\n            <ListGroupItem>\r\n              <Button onClick={addToCartHandler} className='btn-block' disabled={product.countInStock === 0 } type='button'>Add to cart</Button>\r\n            </ListGroupItem>\r\n\r\n          </ListGroup>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n\r\n    <Row>\r\n      <Col md={6}>\r\n        <h4>Reviews</h4>\r\n      \r\n      {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\r\n      <ListGroup variant='flush'>\r\n        {product.reviews.map((review)=>(\r\n          <ListGroup.Item key={review._id}>\r\n          <strong>{review.name}</strong>\r\n          <Rating value={review.rating} color='#f8e825' />\r\n          <p>{review.createdAt.substring(0, 10)}</p>\r\n          <p>{review.comment}</p>\r\n      </ListGroup.Item>\r\n        ))}\r\n      \r\n        <ListGroup.Item>\r\n          <h4>Write a review</h4>\r\n\r\n          {loadingProductReview && <Loader/>}\r\n          {successProductReview && <Message variant='success'>Review Submitted</Message>}\r\n          {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\r\n          \r\n          {userInfo ? (\r\n            <Form onSubmit={submitHandler}>\r\n              <Form.Group controlId='rating'>\r\n                <Form.Label>Rating</Form.Label>\r\n                <Form.Control \r\n                as='select'\r\n                value={rating}\r\n                onChange={(e)=>setRating(e.target.value)}\r\n                >\r\n                <option value=''>Select...</option>\r\n                <option value='1'>1 - Poor</option>\r\n                <option value='2'>2 - Fair</option>\r\n                <option value='3'>3 - Good</option>\r\n                <option value='4'>4 - Very Good</option>\r\n                <option value='5'>5 - Excellent</option>\r\n                </Form.Control>\r\n\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='comment'>\r\n                <Form.Label>Review</Form.Label>\r\n                <Form.Control as='textarea'\r\n                row='5' value={comment} onChange={(e)=>setComment(e.target.value)}\r\n                ></Form.Control>  \r\n              </Form.Group>\r\n              <Button variant='primary'\r\n               disabled={loadingProductReview}\r\n                type='submit' \r\n                className='float-right my-2'>\r\n                Submit\r\n              </Button>\r\n\r\n            </Form>\r\n          ):(\r\n            <Message variant='info'>Please <Link to='/login'>Login to write a review</Link></Message>\r\n          )}\r\n        </ListGroup.Item>\r\n      </ListGroup>\r\n      </Col>\r\n    </Row>\r\n\r\n    </div>)\r\n\r\n    }\r\n    \r\n    </div>\r\n  )\r\n}\r\n ","D:\\ecommerce\\frontend\\src\\pages\\CartScreen.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\LoginPage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\RegisterPage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\ProfilePage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\PlaceOrderPage.js",["226"],[],"import React,{useEffect} from 'react'\r\nimport { Row,Col,Button,ListGroup,Image,Card } from 'react-bootstrap'\r\nimport Message from \"../components/Message\"\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport { useNavigate,Link } from \"react-router-dom\"\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../components/actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../components/constants/orderConstants'\r\n\r\n\r\nexport default function PlaceOrderPage() {\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const {order, error, success} = orderCreate\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const cart = useSelector(state => state.cart)\r\n    cart.itemsPrice = cart.cartItems.reduce((acc,item) => acc + item.price * item.qty,0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 500 ? 0: 50).toFixed(2)\r\n    cart.taxPrice = Number((0.12)*cart.itemsPrice).toFixed(2)\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n    \r\n    if(!cart.paymentMethod){\r\n        navigate('/payment')\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        if(success){\r\n            navigate(`/order/${order._id}`)\r\n            dispatch({type:ORDER_CREATE_RESET})\r\n        }\r\n    },[dispatch,success,navigate])\r\n    \r\n    const placeOrder = () =>{\r\n        dispatch(createOrder({\r\n            orderItems:cart.cartItems,\r\n            shippingAddress:cart.shippingAddress,\r\n            paymentMethod:cart.paymentMethod,\r\n            itemsPrice:cart.itemsPrice,\r\n            shippingPrice:cart.shippingPrice,\r\n            taxPrice:cart.taxPrice,\r\n            totalPrice:cart.totalPrice\r\n\r\n        }))\r\n    }\r\n  return (\r\n    <div><CheckoutSteps step1 step2 step3 step4/>\r\n    <Row>\r\n        <Col md={8}>\r\n            <ListGroup variant='flush'>\r\n                <ListGroup.Item>\r\n                    <h2>Shipping</h2>\r\n                    <p>\r\n                        <strong>Shipping:</strong>\r\n                        {cart.shippingAddress.address},{cart.shippingAddress.city},\r\n                        {''}\r\n                        {cart.shippingAddress.country}- {''}\r\n                        {cart.shippingAddress.postalcode}\r\n                        \r\n                    </p>\r\n                    <p>\r\n                        <strong>Mobile No: </strong> {''}\r\n                        {cart.shippingAddress.mobileNo}\r\n                    </p>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <h2>Payment Method</h2>\r\n                    <p>\r\n                        <strong>Payment Through: </strong>\r\n                        {cart.paymentMethod}\r\n                        </p>\r\n\r\n\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <h2>Order Items</h2>\r\n                    {cart.cartItems.length === 0 ? (<Message>\r\n                        Your cart is empty\r\n                    </Message>)\r\n                    :(<ListGroup variant='flush'>\r\n                        {cart.cartItems.map((item,index) =>(\r\n                            <ListGroup.Item key={index}>\r\n                                <Row>\r\n                                    <Col md={1}>\r\n                                    <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                    </Col>\r\n                                    <Col>\r\n                                     <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                    </Col>\r\n\r\n                                    <Col md={4}>\r\n                                        {item.qty} X Rs.{item.price} = Rs.{(item.qty * item.price).toFixed(2)}\r\n                                    </Col>\r\n\r\n\r\n\r\n                                </Row>\r\n\r\n                            </ListGroup.Item>\r\n                        ))}\r\n\r\n                    </ListGroup>)}\r\n                    \r\n\r\n\r\n                </ListGroup.Item>\r\n\r\n            </ListGroup>\r\n        </Col>\r\n\r\n        <Col md={4}>\r\n            <Card>\r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2>Order Summary</h2>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Items:</Col>\r\n                            <Col>Rs.{cart.itemsPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Shipping:</Col>\r\n                            <Col>Rs.{cart.shippingPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Tax:</Col>\r\n                            <Col>Rs.{cart.taxPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Total:</Col>\r\n                            <Col>Rs.{cart.totalPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        {error && <Message variant='danger'>{error}</Message>}\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Button\r\n                        type='button'\r\n                        className='btn-block'\r\n                        disabled={cart.items === 0}\r\n                        onClick={placeOrder}\r\n                        >\r\n                            Place Order\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n\r\n                </ListGroup>\r\n\r\n            </Card>\r\n        </Col>\r\n    </Row>\r\n    \r\n    \r\n    \r\n    </div>\r\n  )\r\n}\r\n","D:\\ecommerce\\frontend\\src\\pages\\PaymentPage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\UsersListPage.js",["227"],[],"import React,{useEffect} from 'react'\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport swal from 'sweetalert'\r\nimport { Table,Button } from 'react-bootstrap'\r\nimport Loader from \"../components/Loader\"\r\nimport Message from \"../components/Message\"\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { listUsers, deleteUsers } from '../components/actions/userAction'\r\n\r\nexport default function UsersListPage() {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const userList = useSelector(state =>state.userList)\r\n    const {loading,error,user} = userList\r\n\r\n    const userLogin = useSelector(state =>state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const userDelete = useSelector(state =>state.userDelete)\r\n    const {success, successDelete} = userDelete\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        if(userInfo && userInfo.isAdmin){\r\n            \r\n            dispatch(listUsers())\r\n        }else{\r\n            navigate('/login')\r\n        }\r\n\r\n    },[dispatch,navigate,successDelete,userInfo])\r\n\r\n    const deleteHandler =(id) =>{\r\n        //pop up\r\n        swal({\r\n            title: \"Are you sure want to delete?\",\r\n            text: \"You will not able to recover this user\", \r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n          if (willDelete) {\r\n            swal(\"Poof! user has been successfully deleted!\", {\r\n              icon: \"success\",\r\n            });\r\n            dispatch(deleteUsers(id))\r\n            window.location.reload(false);\r\n          } else {\r\n            swal(\"User is safe!\");\r\n         } })\r\n        }\r\n\r\n\r\n  return (\r\n    <div>\r\n        <h2>Users List</h2> \r\n        {loading ?( <Loader/> ):error ?( <Message variant='danger'>{error}</Message>)\r\n\r\n        :(\r\n            <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                    <tr>\r\n                    <th>ID</th>\r\n                    <th>NAME</th>\r\n                    <th>EMAIL</th>\r\n                    <th>ADMIN</th>\r\n                    <th></th>\r\n                    </tr>\r\n                    \r\n                </thead>\r\n\r\n                <tbody>\r\n                    {user.map(user=>(\r\n                        <tr key={user._id}>\r\n                        <td>{user._id}</td>\r\n                        <td>{user.name}</td>\r\n                        <td>{user.email}</td>\r\n                        <td>{user.isAdmin ?(\r\n                            <i className='fas fa-check' style={{color:'green'}}></i>\r\n                        ):(\r\n                            <i className='fas fa-times' style={{color:'red'}}></i>\r\n                        )}</td>\r\n\r\n                        <td>\r\n                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                <Button variant='light' className='btn-sm'>\r\n                                    <i className='fas fa-edit'></i>\r\n                                    </Button>\r\n                            </LinkContainer>\r\n                            {\"\"}\r\n                            <Button variant='danger'\r\n                            onClick={()=> deleteHandler(user._id)}\r\n                            className='btn-sm mx-2'>\r\n                                    <i className='fas fa-trash'></i>\r\n                                    </Button>\r\n                        </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n\r\n            </Table>\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n","D:\\ecommerce\\frontend\\src\\pages\\OrdersPage.js",["228","229"],[],"import React,{useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\nimport { Row,Col,ListGroup,Image,Card,Button } from 'react-bootstrap'\r\nimport Loader from \"../components/Loader\"\r\nimport swal from 'sweetalert';\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport Message from \"../components/Message\"\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport { useNavigate,Link,useParams } from \"react-router-dom\"\r\nimport { getOrderDetails, payOrder, deliverOrder } from '../components/actions/orderActions'\r\nimport { ORDER_PAY_RESET } from '../components/constants/orderConstants'\r\nimport { ORDER_DELIVER_RESET } from '../components/constants/orderConstants';\r\n\r\n\r\n\r\nexport default function OrdersPage() {\r\n    const { id } = useParams();\r\n    const orderId = id\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const {userInfo} = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const {order, error, loading} = orderDetails\r\n    \r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const {loading:loadingPay,success:successPay} = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const {loading:loadingDeliver,success:successDeliver} = orderDeliver\r\n\r\n    \r\n\r\n    const navigate = useNavigate()\r\n    if(!loading && !error){\r\n      \r\n        order.totalPrice = order.orderItems.reduce((acc,item) => acc + item.price * item.qty,0).toFixed(2)\r\n        var totalPrice = parseInt((Number(order.totalPrice) + Number(order.shippingPrice) + Number(order.taxPrice)).toFixed(2))\r\n    }\r\n  \r\n    \r\n     //Razorpay Payment\r\n     function loadScript(src) {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement('script')\r\n            script.src = src\r\n            script.onload = () => {\r\n                resolve(true)\r\n            }\r\n            script.onerror = () => {\r\n                resolve(false)\r\n            }\r\n            document.body.appendChild(script)\r\n        })\r\n    }\r\n\r\n    \r\n    async function displayRazorpay() {\r\n\t\tconst res = await loadScript('https://checkout.razorpay.com/v1/checkout.js')\r\n\r\n\t\tif (!res) {\r\n\t\t\talert('Failure loading the Razorpay SDK. PLease make sure you are connected to the internet')\r\n\t\t\treturn\r\n        }\r\n    \r\n    \r\n    const orderData = await axios.put(`/api/orders/${id}/pay/`)\r\n    const {orderId } = orderData.data\r\n    \r\n\r\n    const options = {\r\n        key: \"rzp_test_yPeOCOEUY7ILdw\", // Enter the Key ID generated from the Dashboard\r\n        amount: totalPrice * 100,\r\n        currency: \"INR\",\r\n        name: 'Nexus Robotech',\r\n        description: 'Its is an ecommerce company to sale groceries',\r\n        image: 'https://cdn.razorpay.com/logos/7K3b6d18wHwKzL_medium.png',\r\n        order_id:orderId,\r\n        \r\n        handler: async function (response) {\r\n            swal({\r\n                title: \"Payment Success\",\r\n                text: \"Your Payment ID:\"+response.razorpay_payment_id,\r\n                icon: \"success\",\r\n                confirmButtonText: \"OK\",\r\n              });\r\n            navigate('/profile')\r\n \r\n        },\r\n        prefill: {\r\n            name: 'Ajith Kumar',\r\n            contact: '6369600227',\r\n            email: 'nexusrobotech2022@gmail.com'\r\n        },\r\n        notes: {\r\n            address: '3/199, Anumandhanoor village, Thokkiyam Post, Thirupathur Tk&Dt - 635901'\r\n        },\r\n        theme: {\r\n            color: 'blue',\r\n            hide_topbar: false\r\n        }\r\n    };\r\n    const paymentObject = new window.Razorpay(options)\r\n    paymentObject.open()\r\n}\r\n\r\n\r\n    \r\n\r\n    //Paypal Scripts\r\n     const addPayPalScript = () =>{\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = \"https://www.paypal.com/sdk/js?client-id=AYarabvQywJ6NpmHVyF0ffUP0Go1OgtcIn5nAYN_KRkEUVbYf6QeVml3pE2XTQ2NiwVBiQceZBU_VsF-\"\r\n        script.async = true\r\n        script.onload = ()=>{\r\n            setSdkReady(true)\r\n        }\r\n        document.body.appendChild(script)\r\n     }\r\n\r\n     //Paypal scripts \r\n    \r\n    \r\n    useEffect(()=>{\r\n        if (!userInfo) {\r\n            navigate('/login')\r\n        }\r\n\r\n\r\n        if(!order || successPay || order._id !==Number(orderId) || successDeliver){\r\n            dispatch({type:ORDER_PAY_RESET})\r\n            dispatch({type:ORDER_DELIVER_RESET})\r\n            dispatch(getOrderDetails(orderId))\r\n        }else if(!order.isPaid){\r\n            if(!window.paypal){\r\n                addPayPalScript()  \r\n                \r\n            }else{\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n        \r\n         \r\n    },[dispatch,navigate,userInfo,order,orderId, successPay,successDeliver])\r\n\r\n \r\n    const successpaymentHandler = (paymentResult) =>{\r\n        dispatch(payOrder(orderId, paymentResult))\r\n\r\n    }\r\n\r\n    const successDeliverHandler = () =>{\r\n        dispatch(deliverOrder(order))\r\n\r\n    }\r\n  return (\r\n\r\n    loading ? (<Loader/>) : error ? (<Message variant='danger'>{error}</Message>) :(\r\n    <div>\r\n        <h1>Order:{order._id}</h1>\r\n    <Row>\r\n        <Col md={8}>\r\n            <ListGroup variant='flush'>\r\n                <ListGroup.Item>\r\n                    <h2>Shipping</h2>\r\n                    <p><strong>Name:</strong>{order.user.name}</p>\r\n                    <p><strong>Email:</strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n                    </p>\r\n                    <p><strong>Mobile No:</strong>{order.shippingAddress.mobileNo}</p>\r\n                    <p>\r\n                        <strong>Shipping: </strong>\r\n                        {order.shippingAddress.address},{order.shippingAddress.city},\r\n                        {''}\r\n                        {order.shippingAddress.country}-{order.shippingAddress.postalCode}\r\n                    </p>\r\n                    {order.isDelivered ? (<Message variant='success'>Delivered On {(order.deliveredAt).substring(0,10)}</Message>\r\n                     ):(<Message variant='warning'>Not Delivered</Message>)}\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <h2>Payment Method</h2>\r\n                    <p>\r\n                        <strong>Payment Through: </strong>\r\n                        {order.paymentMethod}\r\n                        </p>\r\n                     {order.isPaid ? (<Message variant='success'>Paid on {(order.paidAt).substring(0,10)}</Message>\r\n                     ):(<Message variant='warning'>Not Paid</Message>)}\r\n\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item>\r\n                    <h2>Order Items</h2>\r\n                    {order.orderItems.length === 0 ? (<Message>\r\n                        Your order is empty\r\n                    </Message>)\r\n                    :(<ListGroup variant='flush'>\r\n                        {order.orderItems.map((item,index) =>(\r\n                            <ListGroup.Item key={index}>\r\n                                <Row>\r\n                                    <Col md={1}>\r\n                                    <Image src={item.image} alt={item.name} fluid rounded/>\r\n                                    </Col>\r\n                                    <Col>\r\n                                     <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                    </Col>\r\n\r\n                                    <Col md={6}>\r\n                                        {item.qty} X Rs.{item.price} = Rs.{(item.qty * item.price).toFixed(2)}\r\n                                    </Col>\r\n\r\n\r\n\r\n                                </Row>\r\n\r\n                            </ListGroup.Item>\r\n                        ))}\r\n\r\n                    </ListGroup>)}\r\n                    \r\n\r\n\r\n                </ListGroup.Item>\r\n\r\n            </ListGroup>\r\n        </Col>\r\n\r\n        <Col md={4}>\r\n            <Card>\r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2>Order Summary</h2>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Items:</Col>\r\n                            <Col>Rs.{order.totalPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Shipping:</Col>\r\n                            <Col>Rs.{order.shippingPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Tax:</Col>\r\n                            <Col>Rs.{order.taxPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Total:</Col>\r\n                            <Col>Rs.{totalPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    {(() => {\r\n                                if (!order.isPaid && order.paymentMethod === 'Paypal' ) {\r\n                                return (\r\n                                    <PayPalButton\r\n                                amount = {totalPrice}\r\n                                onSuccess={successpaymentHandler}\r\n                                \r\n                                />\r\n                                )\r\n                                } else if (!order.isPaid && order.paymentMethod === 'Razorpay') {\r\n                                return (\r\n                                    <Button className='btn-md'\r\n                                    onClick={displayRazorpay}\r\n                                    >Pay with Razorpay</Button>\r\n                                )\r\n                                } else if (!order.isPaid && order.paymentMethod === 'Cash on Delivery') {\r\n                                return (\r\n                                    <div>\r\n                                        <p className='codtext'>Cash on Delivery</p>\r\n                                    </div>\r\n                                )\r\n                                } else {\r\n                                return (\r\n                                    \"\"\r\n                                )\r\n                                }\r\n                            })()}\r\n\r\n                </ListGroup>\r\n                 {loadingDeliver && <Loader/>}\r\n                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                    <ListGroup.Item>\r\n                        <Button type='button' className='btn btn-block'\r\n                        onClick={successDeliverHandler}\r\n                        >Mark As Delivered</Button>\r\n                    </ListGroup.Item>\r\n                )}\r\n\r\n            </Card>\r\n        </Col>\r\n    </Row>\r\n    \r\n    \r\n    \r\n    </div>\r\n  ))\r\n}\r\n\r\n","D:\\ecommerce\\frontend\\src\\pages\\ShippingPage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\UserEditPage.js",["230"],[],"import React,{useEffect,useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Form,Button} from 'react-bootstrap'\r\nimport Loader from \"../components/Loader\"\r\nimport Message from \"../components/Message\"\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport FormContainer from './FormContainer'\r\nimport { useNavigate,useParams } from \"react-router-dom\"\r\nimport { getUserDetails,updateUsers } from '../components/actions/userAction'\r\nimport { USER_UPDATE_RESET } from '../components/constants/userConstants'\r\n\r\nexport default function UserEditPage() {\r\n  const {id} = useParams()\r\n  const userId = id\r\n  const navigate = useNavigate()\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector(state => state.userDetails)\r\n  const { error, loading, user } = userDetails\r\n\r\n  const userUpdate = useSelector(state => state.userUpdate)\r\n  const { error:errorUpdate, loading:loadingUpdate,success:successUpdate } = userUpdate\r\n \r\n\r\n  useEffect(() => {\r\n    if(successUpdate){\r\n      dispatch({type:USER_UPDATE_RESET})\r\n      navigate('/admin/userlist')\r\n    }else{\r\n\r\n    \r\n    if (!user.name || user._id !== Number(userId)) {\r\n              dispatch(getUserDetails(userId))\r\n          } else {\r\n              setName(user.name)\r\n              setEmail(user.email)\r\n              setIsAdmin(user.isAdmin)\r\n          }\r\n      }},\r\n\r\n   [user, userId, successUpdate, navigate])\r\n\r\n  const submitHandler = (e) => {\r\n      e.preventDefault()\r\n      dispatch(updateUsers({_id:user._id,name,email,isAdmin}))\r\n      \r\n  }\r\n\r\n  return (\r\n      <div>\r\n        \r\n          <Link to='/admin/userlist'>\r\n              Go Back\r\n          </Link>\r\n          \r\n\r\n          <FormContainer>\r\n          <h2>Edit User</h2>\r\n          {loadingUpdate && <Loader/>}\r\n          {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n               \r\n              {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                  : (\r\n                      <Form onSubmit={submitHandler}>\r\n\r\n                          <Form.Group controlId='name'className='my-2'>\r\n                              <Form.Label>Name</Form.Label>\r\n                              <Form.Control\r\n                                  type='name'\r\n                                  placeholder='Enter name'\r\n                                  value={name}\r\n                                  required\r\n                                  onChange={(e) => setName(e.target.value)}\r\n                              >\r\n                              </Form.Control>\r\n                          </Form.Group>\r\n\r\n                          <Form.Group controlId='email'className='my-2'>\r\n                              <Form.Label>Email Address</Form.Label>\r\n                              <Form.Control\r\n                                  type='email'\r\n                                  placeholder='Enter Email'\r\n                                  value={email}\r\n                                  required\r\n                                  onChange={(e) => setEmail(e.target.value)}\r\n                              >\r\n                              </Form.Control>\r\n                          </Form.Group>\r\n\r\n                          <Form.Group controlId='isadmin'className='my-3'>\r\n                              <Form.Check\r\n                                  type='checkbox'\r\n                                  label='Is Admin'\r\n                                  checked={isAdmin}\r\n                                  onChange={(e) => setIsAdmin(e.target.checked)}\r\n                              >\r\n                              </Form.Check>\r\n                          </Form.Group>\r\n\r\n                          <Button type='submit' variant='primary'className='my-2 float-right'>\r\n                              Update\r\n                      </Button>\r\n\r\n                      </Form>\r\n                  )}\r\n\r\n          </FormContainer >\r\n      </div>\r\n\r\n  )\r\n}\r\n\r\n","D:\\ecommerce\\frontend\\src\\pages\\ProductListPage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\ProductEditPage.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\OrderListPage.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\Loader.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\SearchBox.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\Message.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\Paginate.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\ProductCarousal.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\Rating.js",[],[],"D:\\ecommerce\\frontend\\src\\pages\\FormContainer.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\CheckoutSteps.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\constants\\userConstants.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\constants\\productConstants.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\constants\\orderConstants.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\actions\\productAction.js",["231"],[],"import { \r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n    \r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n } from \"../constants/productConstants\"\r\n import axios from \"axios\"\r\n\r\n\r\nexport const listProducts = (keyword='') => async (dispatch) =>{\r\n\r\n    try{\r\n        dispatch({type:PRODUCT_LIST_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/products${keyword}`)\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n\r\n }  \r\nexport const listTopProducts = () => async (dispatch) =>{\r\n\r\n    try{\r\n        dispatch({type:PRODUCT_TOP_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/products/top/`)\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n\r\n }  \r\n\r\n\r\nexport const listProductDetails = (id) => async (dispatch) =>{\r\n    \r\n\r\n    try{\r\n        dispatch({type:PRODUCT_DETAILS_REQUEST})\r\n\r\n        const {data} = await axios.get(`/api/products/${id}`)\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n\r\n }\r\n\r\nexport const deleteProduct =(id) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:PRODUCT_DELETE_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.delete(\r\n            `/api/products/delete/${id}`,\r\n            config)\r\n\r\n        dispatch({\r\n            type:PRODUCT_DELETE_SUCCESS\r\n            \r\n        })\r\n        \r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const createProduct =() => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:PRODUCT_CREATE_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n            `/api/products/create/`,{},\r\n            config)\r\n\r\n        dispatch({\r\n            type:PRODUCT_CREATE_SUCCESS,\r\n            payload:data\r\n            \r\n        })\r\n        \r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateProduct =(product) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:PRODUCT_UPDATE_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(\r\n            `/api/products/update/${product._id}/`,product,\r\n            config)\r\n\r\n        dispatch({\r\n            type:PRODUCT_UPDATE_SUCCESS,\r\n            payload:data\r\n            \r\n        })\r\n\r\n        dispatch({\r\n            type:PRODUCT_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n        \r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductReview =(id, review) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:PRODUCT_CREATE_REVIEW_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n            `/api/products/${id}/reviews/`,review,\r\n            config)\r\n\r\n        dispatch({\r\n            type:PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload:data\r\n            \r\n        })\r\n \r\n        \r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}","D:\\ecommerce\\frontend\\src\\components\\Product.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\constants\\cartConstants.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\actions\\userAction.js",["232"],[],"\r\nimport { \r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    \r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n  \r\n    \r\n\r\n } from \"../constants/userConstants\";\r\n\r\nimport { CART_CLEAR_ITEMS } from \"../constants/cartConstants\";\r\n\r\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const login =(email, password) => async(dispatch)=>{\r\n    try{\r\n        dispatch({\r\n            type:USER_LOGIN_REQUEST,\r\n        })\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json'\r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n            '/api/users/login/',\r\n            {'username':email,'password':password},config)\r\n\r\n        dispatch({\r\n            type:USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) =>{\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({\r\n        type:USER_LOGOUT\r\n    })\r\n    dispatch({\r\n        type:USER_DETAILS_RESET\r\n    })\r\n    dispatch({\r\n        type:ORDER_LIST_MY_RESET\r\n    })\r\n    dispatch({\r\n        type:USER_LIST_RESET\r\n    })\r\n    \r\n}\r\n\r\n\r\nexport const register =(name,email, password) => async(dispatch)=>{\r\n    try{\r\n        dispatch({\r\n            type:USER_REGISTER_REQUEST,\r\n        })\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json'\r\n            }\r\n        }\r\n        const {data} = await axios.post(\r\n            '/api/users/register/',\r\n            {'name':name,'email':email,'password':password},config)\r\n\r\n        dispatch({\r\n            type:USER_REGISTER_SUCCESS,\r\n            payload:data\r\n        })\r\n        dispatch({\r\n            type:USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getUserDetails =(id) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:USER_DETAILS_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config)\r\n\r\n        dispatch({\r\n            type:USER_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUserProfile =(user) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:USER_UPDATE_PROFILE_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(\r\n            `/api/users/profile/update/`,user,\r\n            config)\r\n\r\n        dispatch({\r\n            type:USER_UPDATE_PROFILE_SUCCESS,\r\n            payload:data\r\n        })\r\n        dispatch({\r\n            type:USER_LOGIN_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listUsers =(user) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:USER_LIST_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.get(\r\n            `/api/users/`,config)\r\n\r\n        dispatch({\r\n            type:USER_LIST_SUCCESS,\r\n            payload:data\r\n        })\r\n         \r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteUsers =(id) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:USER_DELETE_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.delete(\r\n            `/api/users/delete/${id}`,config)\r\n\r\n        dispatch({\r\n            type:USER_DELETE_SUCCESS,\r\n            payload:data\r\n        })\r\n         \r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n \r\nexport const updateUsers =(user) => async(dispatch,getState)=>{\r\n    try{\r\n        dispatch({\r\n            type:USER_UPDATE_REQUEST,\r\n        })\r\n        const {\r\n            userLogin:{userInfo},\r\n        } = getState()\r\n        const config = {\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n        const {data} = await axios.put(\r\n            `/api/users/update/${user._id}/`,user,config)\r\n\r\n        dispatch({\r\n            type:USER_UPDATE_SUCCESS,\r\n            payload:data\r\n        })\r\n        dispatch({\r\n            type:USER_DETAILS_SUCCESS,\r\n            payload:data\r\n        })\r\n         \r\n\r\n    }catch(error){\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n ","D:\\ecommerce\\frontend\\src\\components\\actions\\cartActions.js",[],[],"D:\\ecommerce\\frontend\\src\\components\\actions\\orderActions.js",[],[],{"ruleId":"233","severity":1,"message":"234","line":44,"column":8,"nodeType":"235","endLine":44,"endColumn":39,"suggestions":"236"},{"ruleId":"233","severity":1,"message":"237","line":31,"column":7,"nodeType":"235","endLine":31,"endColumn":34,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":21,"column":12,"nodeType":"241","messageId":"242","endLine":21,"endColumn":19},{"ruleId":"239","severity":1,"message":"243","line":24,"column":12,"nodeType":"241","messageId":"242","endLine":24,"endColumn":20},{"ruleId":"239","severity":1,"message":"244","line":30,"column":20,"nodeType":"241","messageId":"242","endLine":30,"endColumn":30},{"ruleId":"233","severity":1,"message":"245","line":45,"column":4,"nodeType":"235","endLine":45,"endColumn":43,"suggestions":"246"},{"ruleId":"239","severity":1,"message":"247","line":118,"column":16,"nodeType":"241","messageId":"242","endLine":118,"endColumn":20},{"ruleId":"239","severity":1,"message":"248","line":40,"column":10,"nodeType":"241","messageId":"242","endLine":40,"endColumn":26},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["249"],"React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["250"],"no-unused-vars","'success' is assigned a value but never used.","Identifier","unusedVar","'sdkReady' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["251"],"'data' is assigned a value but never used.","'CART_CLEAR_ITEMS' is defined but never used.",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},"Update the dependencies array to be: [dispatch, id, successProductReview]",{"range":"258","text":"259"},"Update the dependencies array to be: [dispatch, success, navigate, order._id]",{"range":"260","text":"261"},"Update the dependencies array to be: [user, userId, successUpdate, navigate, dispatch]",{"range":"262","text":"263"},[1520,1551],"[dispatch, id, successProductReview]",[1327,1354],"[dispatch, success, navigate, order._id]",[1500,1539],"[user, userId, successUpdate, navigate, dispatch]"]